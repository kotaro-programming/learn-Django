Templateについて

templateの作成
webサイト全体で共通するレイアウトのbase.htmlは、プロジ
ェクトのルートディレクトリに作成したフォルダに配置

各アプリのテンプレートは、base.htmlを継承した形で作成
ディレクトリは各appディレクトリにTemplatesディレクトリを
作成しそこに作成

template Djangoタグ
 {% %} テンプレートタグ
  なんらかの処理を行う
 {{}}  テンプレート変数
  データを扱う
  テンプレート変数をタグで囲むことでDjangoの要素をタグに反映できる

base.htmlの作成
<head>や<footer>などを共通なものを定義
{% block content %}{% endblock content %}を書き
その中に個別のtemplateファイルの内容を書く

base.htmlを継承したtemplateファイル
{% extends 'base.html' %}
を最初に書く

base.htmlで定義した
{% block content %}{% endblock content %}
の中に個別の内容を書く

{{ form.as_p }}
viewの中で指定したmodelで定義された項目を、pタグで囲って
表示させるタグ

{% csrf_token %}
Djangoのテンプレートでformを作成する場合にcsrf_tokenと
いうタグをつけなければならない
csrf_tokenは、インターネットにおけるワンタイムパスワード
のようなイメージで、それを持っていない状態では処理を行う
ことができない仕組み

{% url 'urls.pyで定義したview名' for文の仮変数.pk %}
for文で各モデルを表示させた場合
リンクの設定 a href=''での文字列の中にこのように書くことで
int:pkが必要なurlのリンクが作れる

{url 'urls.pyで定義したview名' object.pk}
同じプライマリーキーの違うurlsに移動できる

{{ object_list }}
モデルで定義したデータベースのテンプレート

GETとPOST
 ユーザー登録のフォームにユーザー名が入力されていない状態で、
 送信ボタンをクリックすると、通常、ブラウザにエラーが表示
 しかし、GETとPOSTを正しく理解せず実装を進めると、フォーム
 処理が呼び出され、エラーが発生する可能性がある

 requestメソッドをがGETかPOSTかを条件分岐によって判定する
 ことでユーザーが会員登録をするというボタンをクリックしたと
 きにのみ、内部で処理をする形を作ることができる
 

